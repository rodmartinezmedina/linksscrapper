import{RuntimeModel as e,SDKModel as t,ResourceTreeModel as n,ConsoleModel as o,NetworkManager as i,DOMDebuggerModel as s,DebuggerModel as r}from"../sdk/sdk.js";import{NetworkProject as a,ResourceMapping as c,PresentationConsoleMessageHelper as l,CSSWorkspaceBinding as d,DebuggerWorkspaceBinding as u,BreakpointManager as g,BlackboxManager as m}from"../bindings/bindings.js";import{Settings as p,UIString as h,AppProvider as f,QueryParamHandler as S,Console as x,Revealer as v}from"../common/common.js";import{Reload as I}from"../components/components.js";import{ExtensionServer as w}from"../extensions/extensions.js";import{InspectorFrontendHost as b,Platform as M,userMetrics as C,InspectorFrontendHostAPI as R,UserMetrics as _}from"../host/host.js";import{IsolatedFileSystemManager as k,FileSystemWorkspaceBinding as E,Persistence as T,NetworkPersistenceManager as y}from"../persistence/persistence.js";import{NumberUtilities as U}from"../platform/platform.js";import{InspectorBackend as D}from"../protocol_client/protocol_client.js";import{ViewManager as P,UIUtils as L,InspectorView as F,ZoomManager as A,ContextMenu as B,Tooltip as W,DockController as H,ShortcutsScreen as O,Context as z,ActionRegistry as V,ShortcutRegistry as N,KeyboardShortcut as K,SearchableView as j,Toolbar as G,RootView as q}from"../ui/ui.js";import{FileManager as Z,Workspace as J}from"../workspace/workspace.js";class Q{constructor(n,o){o.addFlavorChangeListener(e.ExecutionContext,this._executionContextChanged,this),o.addFlavorChangeListener(t.Target,this._targetChanged,this),n.addModelListener(e.RuntimeModel,e.Events.ExecutionContextCreated,this._onExecutionContextCreated,this),n.addModelListener(e.RuntimeModel,e.Events.ExecutionContextDestroyed,this._onExecutionContextDestroyed,this),n.addModelListener(e.RuntimeModel,e.Events.ExecutionContextOrderChanged,this._onExecutionContextOrderChanged,this),this._targetManager=n,this._context=o,n.observeModels(e.RuntimeModel,this)}modelAdded(e){setImmediate(function(){this._context.flavor(t.Target)||this._context.setFlavor(t.Target,e.target())}.bind(this))}modelRemoved(n){const o=this._context.flavor(e.ExecutionContext);o&&o.runtimeModel===n&&this._currentExecutionContextGone();const i=this._targetManager.models(e.RuntimeModel);this._context.flavor(t.Target)===n.target()&&i.length&&this._context.setFlavor(t.Target,i[0].target())}_executionContextChanged(e){const n=e.data;n&&(this._context.setFlavor(t.Target,n.target()),this._ignoreContextChanged||(this._lastSelectedContextId=this._contextPersistentId(n)))}_contextPersistentId(e){return e.isDefault?e.target().name()+":"+e.frameId:""}_targetChanged(t){const n=t.data,o=this._context.flavor(e.ExecutionContext);if(!n||o&&o.target()===n)return;const i=n.model(e.RuntimeModel),s=i?i.executionContexts():[];if(!s.length)return;let r=null;for(let e=0;e<s.length&&!r;++e)this._shouldSwitchToContext(s[e])&&(r=s[e]);for(let e=0;e<s.length&&!r;++e)this._isDefaultContext(s[e])&&(r=s[e]);this._ignoreContextChanged=!0,this._context.setFlavor(e.ExecutionContext,r||s[0]),this._ignoreContextChanged=!1}_shouldSwitchToContext(e){return!(!this._lastSelectedContextId||this._lastSelectedContextId!==this._contextPersistentId(e))||!(this._lastSelectedContextId||!this._isDefaultContext(e))}_isDefaultContext(e){if(!e.isDefault||!e.frameId)return!1;if(e.target().parentTarget())return!1;const t=e.target().model(n.ResourceTreeModel),o=t&&t.frameForId(e.frameId);return!(!o||!o.isTopFrame())}_onExecutionContextCreated(e){this._switchContextIfNecessary(e.data)}_onExecutionContextDestroyed(t){const n=t.data;this._context.flavor(e.ExecutionContext)===n&&this._currentExecutionContextGone()}_onExecutionContextOrderChanged(e){const t=e.data.executionContexts();for(let e=0;e<t.length&&!this._switchContextIfNecessary(t[e]);e++);}_switchContextIfNecessary(t){return!(this._context.flavor(e.ExecutionContext)&&!this._shouldSwitchToContext(t))&&(this._ignoreContextChanged=!0,this._context.setFlavor(e.ExecutionContext,t),this._ignoreContextChanged=!1,!0)}_currentExecutionContextGone(){const t=this._targetManager.models(e.RuntimeModel);let n=null;for(let e=0;e<t.length&&!n;++e){const o=t[e].executionContexts();for(const e of o)if(this._isDefaultContext(e)){n=e;break}}if(!n)for(let e=0;e<t.length&&!n;++e){const o=t[e].executionContexts();if(o.length){n=o[0];break}}this._ignoreContextChanged=!0,this._context.setFlavor(e.ExecutionContext,n),this._ignoreContextChanged=!1}}var X=Object.freeze({__proto__:null,ExecutionContextSelector:Q});class Y{constructor(){Y._instanceForTest=this,runOnWindowLoad(this._loaded.bind(this))}static time(e){b.isUnderTest()||console.time(e)}static timeEnd(e){b.isUnderTest()||console.timeEnd(e)}async _loaded(){console.timeStamp("Main._loaded"),await Runtime.appStarted,Root.Runtime.setPlatform(M.platform()),Root.Runtime.setL10nCallback(ls),b.InspectorFrontendHostInstance.getPreferences(this._gotPreferences.bind(this))}_gotPreferences(e){console.timeStamp("Main._gotPreferences"),b.isUnderTest(e)&&self.runtime.useTestBase(),this._createSettings(e),this._createAppUI()}_createSettings(e){this._initializeExperiments();let t,n="";M.isCustomDevtoolsFrontend()?n="__custom__":Root.Runtime.queryParam("can_dock")||!Root.Runtime.queryParam("debugFrontend")||b.isUnderTest()||(n="__bundled__"),t=!b.isUnderTest()&&window.localStorage?new p.SettingsStorage(window.localStorage,void 0,void 0,()=>window.localStorage.clear(),n):new p.SettingsStorage({},void 0,void 0,void 0,n);const o=new p.SettingsStorage(e,b.InspectorFrontendHostInstance.setPreference,b.InspectorFrontendHostInstance.removePreference,b.InspectorFrontendHostInstance.clearPreferences,n);p.Settings.instance({forceNew:!0,globalStorage:o,localStorage:t}),self.Common.settings=p.Settings.instance(),b.isUnderTest()||(new p.VersionController).updateVersion()}_initializeExperiments(){Root.Runtime.experiments.register("applyCustomStylesheet","Allow custom UI themes"),Root.Runtime.experiments.register("captureNodeCreationStacks","Capture node creation stacks"),Root.Runtime.experiments.register("sourcesPrettyPrint","Automatically pretty print in the Sources Panel"),Root.Runtime.experiments.register("backgroundServices","Background web platform feature events",!0),Root.Runtime.experiments.register("backgroundServicesNotifications","Background services section for Notifications"),Root.Runtime.experiments.register("backgroundServicesPaymentHandler","Background services section for Payment Handler"),Root.Runtime.experiments.register("backgroundServicesPushMessaging","Background services section for Push Messaging"),Root.Runtime.experiments.register("blackboxJSFramesOnTimeline","Blackbox JavaScript frames on Timeline",!0),Root.Runtime.experiments.register("cssOverview","CSS Overview"),Root.Runtime.experiments.register("emptySourceMapAutoStepping","Empty sourcemap auto-stepping"),Root.Runtime.experiments.register("inputEventsOnTimelineOverview","Input events on Timeline overview",!0),Root.Runtime.experiments.register("liveHeapProfile","Live heap profile",!0),Root.Runtime.experiments.register("nativeHeapProfiler","Native memory sampling heap profiler",!0),Root.Runtime.experiments.register("protocolMonitor","Protocol Monitor"),Root.Runtime.experiments.register("issuesPane","Issues Pane"),Root.Runtime.experiments.register("developerResourcesView","Show developer resources view"),Root.Runtime.experiments.register("recordCoverageWithPerformanceTracing","Record coverage while performance tracing"),Root.Runtime.experiments.register("samplingHeapProfilerTimeline","Sampling heap profiler timeline",!0),Root.Runtime.experiments.register("showOptionToNotTreatGlobalObjectsAsRoots","Show option to take heap snapshot where globals are not treated as root"),Root.Runtime.experiments.register("sourceDiff","Source diff"),Root.Runtime.experiments.register("sourceOrderViewer","Source order viewer"),Root.Runtime.experiments.register("spotlight","Spotlight",!0),Root.Runtime.experiments.register("webauthnPane","WebAuthn Pane"),Root.Runtime.experiments.register("customKeyboardShortcuts","Enable custom keyboard shortcuts settings tab (requires reload)"),Root.Runtime.experiments.register("timelineEventInitiators","Timeline: event initiators"),Root.Runtime.experiments.register("timelineFlowEvents","Timeline: flow events",!0),Root.Runtime.experiments.register("timelineInvalidationTracking","Timeline: invalidation tracking",!0),Root.Runtime.experiments.register("timelineShowAllEvents","Timeline: show all events",!0),Root.Runtime.experiments.register("timelineV8RuntimeCallStats","Timeline: V8 Runtime Call Stats on Timeline",!0),Root.Runtime.experiments.register("timelineWebGL","Timeline: WebGL-based flamechart"),Root.Runtime.experiments.register("timelineReplayEvent","Timeline: Replay input events",!0),Root.Runtime.experiments.register("wasmDWARFDebugging","WebAssembly Debugging: Enable DWARF support"),Root.Runtime.experiments.register("dualScreenSupport","Emulation: Support dual screen mode"),Root.Runtime.experiments.register("cssGridFeatures","Enable new CSS Grid debugging features (configuration options available in Layout sidebar pane in Elements after restart)"),Root.Runtime.experiments.register("movableTabs","Enable support to move tabs between panels"),Root.Runtime.experiments.cleanUpStaleExperiments();const e=Root.Runtime.queryParam("enabledExperiments");e&&Root.Runtime.experiments.setServerEnabledExperiments(e.split(";")),Root.Runtime.experiments.setDefaultExperiments(["backgroundServices","backgroundServicesNotifications","backgroundServicesPushMessaging","backgroundServicesPaymentHandler","customKeyboardShortcuts","issuesPane"]),b.isUnderTest()&&Root.Runtime.queryParam("test").includes("live-line-level-heap-profile.js")&&Root.Runtime.experiments.enableForTest("liveHeapProfile");for(const e of Root.Runtime.experiments.enabledExperiments())C.experimentEnabledAtLaunch(e.name)}async _createAppUI(){Y.time("Main._createAppUI"),self.UI.viewManager=P.ViewManager.instance(),self.Persistence.isolatedFileSystemManager=k.IsolatedFileSystemManager.instance();const e=p.Settings.instance().createSetting("uiTheme","systemPreferred");if(L.initializeUIUtils(document,e),"systemPreferred"===e.get()){window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",()=>{F.InspectorView.instance().displayReloadRequiredWarning(ls`The system-preferred color scheme has changed. To apply this change to DevTools, reload.`)})}L.installComponentRootStyles(document.body),this._addMainEventListeners(document);const n=!!Root.Runtime.queryParam("can_dock");self.UI.zoomManager=A.ZoomManager.instance({forceNew:!0,win:window,frontendHost:b.InspectorFrontendHostInstance}),self.UI.inspectorView=F.InspectorView.instance(),B.ContextMenu.initialize(),B.ContextMenu.installHandler(document),W.Tooltip.installHandler(document),self.SDK.consoleModel=o.ConsoleModel.instance(),self.UI.dockController=new H.DockController(n),self.SDK.multitargetNetworkManager=i.MultitargetNetworkManager.instance({forceNew:!0}),self.SDK.domDebuggerManager=new s.DOMDebuggerManager,t.TargetManager.instance().addEventListener(t.Events.SuspendStateChanged,this._onSuspendStateChanged.bind(this)),self.UI.shortcutsScreen=new O.ShortcutsScreen,self.UI.shortcutsScreen.section(h.UIString("Elements Panel")),self.UI.shortcutsScreen.section(h.UIString("Styles Pane")),self.UI.shortcutsScreen.section(h.UIString("Debugger")),self.UI.shortcutsScreen.section(h.UIString("Console")),self.Workspace.fileManager=new Z.FileManager,self.Workspace.workspace=J.WorkspaceImpl.instance(),self.Bindings.networkProjectManager=a.NetworkProjectManager.instance(),self.Bindings.resourceMapping=c.ResourceMapping.instance({forceNew:!0,targetManager:t.TargetManager.instance(),workspace:J.WorkspaceImpl.instance()}),new l.PresentationConsoleMessageManager,self.Bindings.cssWorkspaceBinding=d.CSSWorkspaceBinding.instance({forceNew:!0,targetManager:t.TargetManager.instance(),workspace:J.WorkspaceImpl.instance()}),self.Bindings.debuggerWorkspaceBinding=u.DebuggerWorkspaceBinding.instance({forceNew:!0,targetManager:t.TargetManager.instance(),workspace:J.WorkspaceImpl.instance()}),self.Bindings.breakpointManager=g.BreakpointManager.instance({forceNew:!0,workspace:J.WorkspaceImpl.instance(),targetManager:t.TargetManager.instance(),debuggerWorkspaceBinding:u.DebuggerWorkspaceBinding.instance()}),self.Extensions.extensionServer=new w.ExtensionServer,new E.FileSystemWorkspaceBinding(k.IsolatedFileSystemManager.instance(),J.WorkspaceImpl.instance()),self.Persistence.persistence=new T.PersistenceImpl(J.WorkspaceImpl.instance(),g.BreakpointManager.instance()),self.Persistence.networkPersistenceManager=new y.NetworkPersistenceManager(J.WorkspaceImpl.instance()),new Q(t.TargetManager.instance(),z.Context.instance()),self.Bindings.blackboxManager=m.BlackboxManager.instance({forceNew:!0,debuggerWorkspaceBinding:u.DebuggerWorkspaceBinding.instance()}),new $;const r=V.ActionRegistry.instance({forceNew:!0});self.UI.actionRegistry=r,self.UI.shortcutRegistry=new N.ShortcutRegistry(r),O.ShortcutsScreen.registerShortcuts(),this._registerMessageSinkListener(),Y.timeEnd("Main._createAppUI"),this._showAppUI(await self.runtime.extension(f.AppProvider).instance())}_showAppUI(e){Y.time("Main._showAppUI");const t=e.createApp();self.UI.dockController.initialize(),t.presentUI(document);const n=V.ActionRegistry.instance().action("elements.toggle-element-search");n&&b.InspectorFrontendHostInstance.events.addEventListener(R.Events.EnterInspectElementMode,()=>{n.execute()},this),b.InspectorFrontendHostInstance.events.addEventListener(R.Events.RevealSourceLine,this._revealSourceLine,this),self.UI.inspectorView.createToolbars(),b.InspectorFrontendHostInstance.loadCompleted();const o=self.runtime.extensions(S.QueryParamHandler);for(const e of o){const t=Root.Runtime.queryParam(e.descriptor().name);null!==t&&e.instance().then(i.bind(null,t))}function i(e,t){t.handleQueryParam(e)}setTimeout(this._initializeTarget.bind(this),0),Y.timeEnd("Main._showAppUI")}async _initializeTarget(){Y.time("Main._initializeTarget");const e=await Promise.all(self.runtime.extensions("early-initialization").map(e=>e.instance()));for(const t of e)await t.run();b.InspectorFrontendHostInstance.readyForTest(),setTimeout(this._lateInitialization.bind(this),100),Y.timeEnd("Main._initializeTarget")}_lateInitialization(){Y.time("Main._lateInitialization"),this._registerShortcuts(),self.Extensions.extensionServer.initializeExtensions();const e=self.runtime.extensions("late-initialization"),t=[];for(const o of e){const e=o.descriptor().setting;async function n(t){t.data&&(p.Settings.instance().moduleSetting(e).removeChangeListener(n),(await o.instance()).run())}e&&!p.Settings.instance().moduleSetting(e).get()?p.Settings.instance().moduleSetting(e).addChangeListener(n):t.push(o.instance().then(e=>e.run()))}this._lateInitDonePromise=Promise.all(t),Y.timeEnd("Main._lateInitialization")}lateInitDonePromiseForTest(){return this._lateInitDonePromise}_registerMessageSinkListener(){x.Console.instance().addEventListener(x.Events.MessageAdded,(function(e){e.data.show&&x.Console.instance().show()}))}_revealSourceLine(e){const t=e.data.url,n=e.data.lineNumber,o=e.data.columnNumber,i=J.WorkspaceImpl.instance().uiSourceCodeForURL(t);i?v.reveal(i.uiLocation(n,o)):J.WorkspaceImpl.instance().addEventListener(J.Events.UISourceCodeAdded,(function e(i){const s=i.data;s.url()===t&&(v.reveal(s.uiLocation(n,o)),J.WorkspaceImpl.instance().removeEventListener(J.Events.UISourceCodeAdded,e))}))}_registerShortcuts(){const e=K.KeyboardShortcut,t=self.UI.shortcutsScreen.section(h.UIString("All Panels"));let n=[e.makeDescriptor("[",K.Modifiers.CtrlOrMeta),e.makeDescriptor("]",K.Modifiers.CtrlOrMeta)];t.addRelatedKeys(n,h.UIString("Go to the panel to the left/right"));const o=h.UIString("Show console");t.addKey(e.makeDescriptor(K.Keys.Tilde,K.Modifiers.Ctrl),o),t.addKey(e.makeDescriptor(K.Keys.Esc),h.UIString("Toggle drawer")),self.UI.dockController.canDock()&&(t.addKey(e.makeDescriptor("M",K.Modifiers.CtrlOrMeta|K.Modifiers.Shift),h.UIString("Toggle device mode")),t.addKey(e.makeDescriptor("D",K.Modifiers.CtrlOrMeta|K.Modifiers.Shift),h.UIString("Toggle dock side"))),t.addKey(e.makeDescriptor("f",K.Modifiers.CtrlOrMeta),h.UIString("Search"));const i=M.isMac()?K.Modifiers.Meta|K.Modifiers.Alt:K.Modifiers.Ctrl|K.Modifiers.Shift,s=e.makeDescriptor("f",i);t.addKey(s,h.UIString("Search across all sources"));const r=self.UI.shortcutRegistry.shortcutDescriptorsForAction("elements.toggle-element-search");r.length&&t.addKey(r[0],h.UIString("Select node to inspect"));const a=K.KeyboardShortcut.makeDescriptor("p",K.Modifiers.CtrlOrMeta);t.addKey(a,h.UIString("Go to source")),M.isMac()&&(n=[e.makeDescriptor("g",K.Modifiers.Meta),e.makeDescriptor("g",K.Modifiers.Meta|K.Modifiers.Shift)],t.addRelatedKeys(n,h.UIString("Find next/previous")))}_postDocumentKeyDown(e){e.handled||self.UI.shortcutRegistry.handleShortcut(e)}_redispatchClipboardEvent(e){const t=new CustomEvent("clipboard-"+e.type,{bubbles:!0});t.original=e;const n=e.target&&e.target.ownerDocument,o=n?n.deepActiveElement():null;o&&o.dispatchEvent(t),t.handled&&e.preventDefault()}_contextMenuEventFired(e){(e.handled||e.target.classList.contains("popup-glasspane"))&&e.preventDefault()}_addMainEventListeners(e){e.addEventListener("keydown",this._postDocumentKeyDown.bind(this),!1),e.addEventListener("beforecopy",this._redispatchClipboardEvent.bind(this),!0),e.addEventListener("copy",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("cut",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("paste",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("contextmenu",this._contextMenuEventFired.bind(this),!0)}_onSuspendStateChanged(){const e=t.TargetManager.instance().allTargetsSuspended();self.UI.inspectorView.onSuspendStateChanged(e)}}class ${constructor(){t.TargetManager.instance().addModelListener(r.DebuggerModel,r.Events.DebuggerPaused,this._debuggerPaused,this)}_debuggerPaused(e){t.TargetManager.instance().removeModelListener(r.DebuggerModel,r.Events.DebuggerPaused,this._debuggerPaused,this);const n=e.data,o=n.debuggerPausedDetails();z.Context.instance().setFlavor(t.Target,n.target()),v.reveal(o)}}new Y;var ee=Object.freeze({__proto__:null,MainImpl:Y,ZoomActionDelegate:class{handleAction(e,t){if(b.InspectorFrontendHostInstance.isHostedMode())return!1;switch(t){case"main.zoom-in":return b.InspectorFrontendHostInstance.zoomIn(),!0;case"main.zoom-out":return b.InspectorFrontendHostInstance.zoomOut(),!0;case"main.zoom-reset":return b.InspectorFrontendHostInstance.resetZoom(),!0}return!1}},SearchActionDelegate:class{handleAction(e,t){let n=j.SearchableView.fromElement(document.deepActiveElement());if(!n){const e=self.UI.inspectorView.currentPanelDeprecated();if(e&&(n=e.searchableView()),!n)return!1}switch(t){case"main.search-in-panel.find":return n.handleFindShortcut();case"main.search-in-panel.cancel":return n.handleCancelSearchShortcut();case"main.search-in-panel.find-next":return n.handleFindNextShortcut();case"main.search-in-panel.find-previous":return n.handleFindPreviousShortcut()}return!1}},MainMenuItem:class{constructor(){this._item=new G.ToolbarMenuButton(this._handleContextMenu.bind(this),!0),this._item.setTitle(h.UIString("Customize and control DevTools"))}item(){return this._item}_handleContextMenu(e){if(self.UI.dockController.canDock()){const t=document.createElement("div");t.classList.add("flex-centered"),t.classList.add("flex-auto"),t.tabIndex=-1;const n=t.createChild("span","flex-auto");n.textContent=h.UIString("Dock side");const i=self.UI.shortcutRegistry.shortcutsForAction("main.toggle-dock");n.title=h.UIString("Placement of DevTools relative to the page. (%s to restore last position)",i[0].title()),t.appendChild(n);const s=new G.Toolbar("",t);M.isMac()&&!self.UI.themeSupport.hasTheme()&&s.makeBlueOnHover();const r=new G.ToolbarToggle(h.UIString("Undock into separate window"),"largeicon-undock"),a=new G.ToolbarToggle(h.UIString("Dock to bottom"),"largeicon-dock-to-bottom"),c=new G.ToolbarToggle(h.UIString("Dock to right"),"largeicon-dock-to-right"),l=new G.ToolbarToggle(h.UIString("Dock to left"),"largeicon-dock-to-left");r.addEventListener(G.ToolbarButton.Events.MouseDown,e=>e.data.consume()),a.addEventListener(G.ToolbarButton.Events.MouseDown,e=>e.data.consume()),c.addEventListener(G.ToolbarButton.Events.MouseDown,e=>e.data.consume()),l.addEventListener(G.ToolbarButton.Events.MouseDown,e=>e.data.consume()),r.addEventListener(G.ToolbarButton.Events.Click,o.bind(null,H.State.Undocked)),a.addEventListener(G.ToolbarButton.Events.Click,o.bind(null,H.State.DockedToBottom)),c.addEventListener(G.ToolbarButton.Events.Click,o.bind(null,H.State.DockedToRight)),l.addEventListener(G.ToolbarButton.Events.Click,o.bind(null,H.State.DockedToLeft)),r.setToggled(self.UI.dockController.dockSide()===H.State.Undocked),a.setToggled(self.UI.dockController.dockSide()===H.State.DockedToBottom),c.setToggled(self.UI.dockController.dockSide()===H.State.DockedToRight),l.setToggled(self.UI.dockController.dockSide()===H.State.DockedToLeft),s.appendToolbarItem(r),s.appendToolbarItem(l),s.appendToolbarItem(a),s.appendToolbarItem(c),t.addEventListener("keydown",e=>{let t=0;if("ArrowLeft"===e.key)t=-1;else{if("ArrowRight"!==e.key)return;t=1}const n=[r,l,a,c];let o=n.findIndex(e=>e.element.hasFocus());o=U.clamp(o+t,0,n.length-1),n[o].element.focus(),e.consume(!0)}),e.headerSection().appendCustomItem(t)}const n=this._item.element;function o(t){const o=document.deepActiveElement().hasAttribute("data-keyboard-focus");self.UI.dockController.once(H.Events.AfterDockSideChanged).then(()=>{n.focus(),o&&L.markAsFocusedByKeyboard(n)}),self.UI.dockController.setDockSide(t),e.discard()}self.UI.dockController.dockSide()===H.State.Undocked&&t.TargetManager.instance().mainTarget()&&t.TargetManager.instance().mainTarget().type()===t.Type.Frame&&e.defaultSection().appendAction("inspector_main.focus-debuggee",h.UIString("Focus debuggee")),e.defaultSection().appendAction("main.toggle-drawer",self.UI.inspectorView.drawerVisible()?h.UIString("Hide console drawer"):h.UIString("Show console drawer")),e.appendItemsAtLocation("mainMenu");const i=e.defaultSection().appendSubMenuItem(h.UIString("More tools")),s=self.runtime.extensions("view",void 0,!0);for(const e of s){const t=e.descriptor();"settings-default"!==t.id?"issues-pane"!==t.id?"closeable"===t.persistence&&("drawer-view"!==t.location&&"panel"!==t.location||i.defaultSection().appendItem(e.title(),P.ViewManager.instance().showView.bind(P.ViewManager.instance(),t.id,!0))):i.defaultSection().appendItem(e.title(),()=>{C.issuesPanelOpenedFrom(_.IssueOpener.HamburgerMenu),P.ViewManager.instance().showView("issues-pane",!0)}):i.defaultSection().appendItem(e.title(),()=>{C.actionTaken(_.Action.SettingsOpenedFromMenu),P.ViewManager.instance().showView("preferences",!0)})}e.footerSection().appendSubMenuItem(h.UIString("Help")).appendItemsAtLocation("mainMenuHelp")}},SettingsButtonProvider:class{constructor(){this._settingsButton=G.Toolbar.createActionButtonForId("settings.show",{showLabel:!1,userActionCode:_.Action.SettingsOpenedFromGear})}item(){return this._settingsButton}},PauseListener:$,sendOverProtocol:function(e,t){return new Promise((n,o)=>{D.test.sendRawMessage(e,t,(e,...t)=>e?o(e):n(t))})},ReloadActionDelegate:class{handleAction(e,t){switch(t){case"main.debug-reload":return I.reload(),!0}return!1}}});class te{presentUI(e){const t=new q.RootView;self.UI.inspectorView.show(t.element),t.attachToDocument(e),t.focus()}}var ne=Object.freeze({__proto__:null,SimpleApp:te,SimpleAppProvider:class{createApp(){return new te}}});export{X as ExecutionContextSelector,ee as MainImpl,ne as SimpleApp};
